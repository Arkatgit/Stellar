GRAMMER SPECIFICATION



In this grammar, {} indicates 0 or more occurrences, and [] indicates 0 or 1 occurrence. 

White spaces are not significant they are there to aid readability.


Program               --> {ToplevelStatement} EOI
ToplevelStatement     -->FunctionDef|Statements
FunctionDeF          --> "function" ("int"|"float"|"char"|"void"|"bool") Ident "(" "void"| FormalArgumentList { ":" FormalArgumentList} ")" 
                           "{"  {Statements}  "}"
FormalArgumentList    -->  ("int"|"float"|"char"|"bool")  Ident["["Expr"]"] 
Statements            --> Datadef|ExecStament
DataDef				--> "var" ("int"|"float"|"char"|"bool")  Ident [":=" Expr] ";"
				  | "const" ("int"|"float"|"char"|"bool") Ident ":=" Expr ";"
                  |"array"  ("int"|"float"|"bool") Ident "[" Expr "]";   
ExecStament           -->IfStatement |WhileStatement|  AssignmentStatement | ReturnStatement|FunctionCall                      
                          
IfStatement			--> "if" Expr "then" "{" {ExecStatement} "}"
						{ "elseif" Expr "then" "{" {ExecStatement} "}" }
				 	      [ "else" "{" {ExecStatement} "}" ]
WhileStatement       -->"while"  Expr "do" "{" {ExecStatement} "}" 

AssignmentStatement	--> Ident["["Expr"]" ] ":=" Expr ";"
ReturnStatement		--> "return" [ Expr] ";"
FunctionCall            --> "call" Ident"(" [ Expr { ":" Expr } ] ")" ";"  
Expr				 --> LogicalExpr
LogicalExpr			--> RelExpr { ("and" | "or") RelExpr}
RelExpr				--> AddExpr { ("=" | "<" | ">" | "<=" | ">=" | "!=") AddExpr }
AddExpr				--> MulExpr { ("+" | "-") MulExpr }
MulExpr				--> UnaryExpr { ("*" | "/" | "mod") UnaryExpr }
UnaryExpr			--> PrimaryExpr
				       | ("+" | "-" | "!") UnaryExpr
PrimaryExpr			--> number
				       | Ident 
				       | Ident "(" [ Expr { ":" Expr } ] ")"
				       | "true"
				       | "false"
                       | "'"Character "'"
				       | Ident"[" Expr "]"
				       | "(" LogicalExpr ")"
Ident				--> "a" - "z" {"a" - "z" "0" - "9" "_"}
number				--> integer
				   | real
integer				--> "0" - "9" {"0" - "9"}
real				--> integer "." integer






NB   
Comment  -- >  "/?" Comment Sequence  
this is comment 
eg   --  /?This is a comment    


   











